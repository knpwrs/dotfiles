% Dev

# Initialize a new nix/direnv project
nix-init

# Run Claude Code in YOLO mode
claude --dangerously-skip-permissions

# Generate a LICENSE file
npx lice

# Convert YAML to JSON
<source> | yq -o=json -P | <dest>

# Convert JSON to YAML
<source> | yq -o=yaml -P | <dest>

# Format JSON
<source> | jq | <dest>

# URL-Encode Text
<source> | tr -d '\n' | node -e 'process.stdout.write(encodeURIComponent(require("fs").readFileSync(0, "utf-8")))' | <dest>

# URL-Decode Text
<source> | node -e 'process.stdout.write(decodeURIComponent(require("fs").readFileSync(0, "utf-8")))' | tr -d '\n' | <dest>

# Base64-Encode
<source> | base64 | <dest>

# Base64-Decode
<source> | base64 -d | <dest>

# Rot13
<source> | tr 'A-Za-z' 'N-ZA-Mn-za-m' | <dest>

# Encode JWT (Plain Text Secret)
<source> | jwt encode --secret <secret> - | <dest>

# Encode JWT (File Secret)
<source> | jwt encode --secret @<file> - | <dest>

# Encode JWT (Base64 Secret)
<source> | jwt encode --secret b64:<secret> - | <dest>

# Decode JWT (No Secret)
<source> | jwt decode - | <dest>

# Decode JWT (Plain Text Secret)
<source> | jwt decode --secret <secret> - | <dest>

# Decode JWT (File Secret)
<source> | jwt decode --secret @<file> - | <dest>

# Decode JWT (Base64 Secret)
<source> | jwt decode --secret b64:<secret> - | <dest>

# Get SHA-256 Hash
<source> | shasum -a 256 | cut -d' ' -f1 | tr -d '\n' | <dest>

# Get XXHASH
<source> | xxhsum | <dest>

# Generate UUID
uuidgen

# Tunnel localhost to public URL
ssh -R 80:localhost:<local_port> nokey@localhost.run

# Shutdown remote host over ssh
ssh -t <host> 'sudo shutdown -h now'

# Restart remote host over ssh
ssh -t <host> 'sudo shutdown -r now'

# Find and Replace Across Files
fd '<fd_pattern>' -x sd '<find_pattern>' '<replace_pattern>' '{}'

# Find and Replace Literal Strings Across Files
fd '<fd_pattern>' -x sd -s '<find_string>' '<replace_string>' '{}'

# Find and Replace in Specific Directory
fd --full-path <directory> -x sd '<find_pattern>' '<replace_pattern>' '{}'

# Find and Replace Literal Strings in Specific Directory
fd --full-path <directory> -x sd -s '<find_string>' '<replace_string>' '{}'

# Find and Replace in Specific Directory with Extension
fd --full-path <directory> --extension <extension> -x sd '<find_pattern>' '<replace_pattern>' '{}'

# Find and Replace Literal Strings in Specific Directory with Extension
fd --full-path <directory> --extension <extension> -x sd -s '<find_string>' '<replace_string>' '{}'

# Find and Replace Across Dirty Files
cat <(git diff --name-only) <(git diff --name-only --staged) <(git ls-files -o --exclude-standard) | xargs -n1 sd '<find_pattern>' '<replace_pattern>'

# Find and Replace Literal Strings Across Dirty Files
cat <(git diff --name-only) <(git diff --name-only --staged) <(git ls-files -o --exclude-standard) | xargs -n1 sd '<find_pattern>' '<replace_pattern>'

# Find and Replace Across Specific Files
sd '<find_pattern>' '<replace_pattern>' <files>

# Find and Replace Literal Strings Across Specific Files
sd -s '<find_string>' '<replace_string>' <files>

# Find Across Files
fd '<fd_pattern>' -x rg '<find_pattern>' '{}'

# Find Across Specific Files
rg '<find_pattern>' <files>

# Count files matching pattern
rg -l '<find_pattern>' | wc -l

# Open files matching pattern in $EDITOR
rg -l '<find_pattern>' | xargs -o $EDITOR

# Launch cheat.sh shell
cht.sh --shell

# Get quick help for a command
cht.sh <command>

# Explain Previous Command
open https://explainshell.com/explain\?cmd=$(echo $(fc -ln -1) | node -e 'process.stdout.write(encodeURIComponent(require("fs").readFileSync(0, "utf-8")))')

# Diff the output of two commands
diff <(<cmd1>) <(<cmd2>)

# Fancy diff the output of two commands
diff -u <(<cmd1>) <(<cmd2>) | delta

# Generate 256-bit secret
openssl rand -hex 32

# Generate 512-bit secret
openssl rand -hex 64

# Generate Bacon Lipsum
curl https://baconipsum.com/api/\?type=meat-and-filler\&paras=<paras>\&format=text

$ paras: echo -e '5\n'

# Add SSH Key to Agent
ssh-add <key>

# Rerun a command until it succeeds
until <cmd>; do echo "Restarting" && sleep 1; done

# Generate an SSH Key https://blog.g3rt.nl/upgrade-your-ssh-keys.html
ssh-keygen -o -a 100 -t ed25519 -C <comment>

$ key: fd '^[^.]+$' ~/.ssh/keys
$ source: echo -e 'pbpaste\nvipe\ncurl -fL $(pbpaste)\n'
$ dest: echo -e 'pbcopy\ncat\ntee\n'
$ fd_pattern: echo -e '.\n'
$ file: fd
$ files: fd --- --multi --map 'navi fn map::expand'
$ directory: fd --type d
$ extension: fd --full-path ./app --type f | sed 's/^.*\.//' | sort | uniq
