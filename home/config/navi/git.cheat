% Git

# Show my git commits
git log --all -i --author '<user_name>'

# Search all git commit messages for a given string, case-insensitive
git log --all -i --grep '<search-text>'

# Search all git commit contents for a given string
git log --all -S '<search-text>'

# Search all git commit contents for a given string, restrict to a given glob
git log --all -S '<search-text>' -- '<glob>'

# Search my git commit messages for a given string, case-insensitive
git log --all -i --author '<user_name>' --grep '<search-text>'

# Search my git commit contents for a given string
git log --all --author '<user_name>' -S '<search-text>'

# Search my git commit contents for a given string, restrict to a given glob
git log --all --author '<user_name>' -S '<search-text>' -- '<glob>'

# Blame ignoring whitespace and line copies
git blame -wCCC <git_file>

# Checkout the main branch
git checkout <main_branch>

# Checkout target branch or tag
git checkout <branch_or_tag>

# Checkout "their" change for a conflicted file
git checkout --theirs <conflicted_file>

# Checkout "our" change for a conflicted file
git checkout --ours <conflicted_file>

# Rebase on a given branch
git rebase <branch>

# Rebase interactively on a given branch
git rebase -i <branch>

# Rebase interactively on a given commit
git rebase -i <commit>

# Rebase interactively before the root
git rebase -i --root

# cherry-pick a given branch
git cherry-pick -i <branch>

# cherry-pick a given commit
git cherry-pick -i <commit>

# cherry-pick a given commit from a given branch
git cherry-pick <commit_from_branch>

# List dirty files
cat <(git diff --name-only) <(git diff --name-only --staged) <(git ls-files -o --exclude-standard)

# Open dirty files in $EDITOR
cat <(git diff --name-only) <(git diff --name-only --staged) <(git ls-files -o --exclude-standard) | xargs -I{} echo $(git rev-parse --show-toplevel)/{} | sort | uniq | xargs -o $EDITOR

# Pick dirty files to open in $EDITOR
$EDITOR <dirty_files>

$dirty_files: cat <(git diff --name-only) <(git diff --name-only --staged) <(git ls-files -o --exclude-standard) | sort | uniq --- --multi --expand --preview 'bat --style=numbers --color=always {}'

# Open staged files in $EDITOR
git diff --staged --name-only | xargs -I{} echo $(git rev-parse --show-toplevel)/{} | xargs -o $EDITOR

# Pick staged files to open in $EDITOR
$EDITOR <staged_files>

# Open files from HEAD commit in $EDITOR
git diff-tree --no-commit-id --name-only -r HEAD | xargs -I{} echo $(git rev-parse --show-toplevel)/{} | xargs -o $EDITOR

# Pick files from HEAD commit to open in $EDITOR
$EDITOR <head_files>

$head_files: git diff-tree --no-commit-id --name-only -r HEAD --- --multi --expand --preview 'bat --style=numbers --color=always {}'

# Open files from given commit in $EDITOR
git diff-tree --no-commit-id --name-only -r <commit> | xargs -I{} echo $(git rev-parse --show-toplevel)/{} | xargs -o $EDITOR

# Pick files from given commit to open in $EDITOR
$EDITOR <commit_files>

$commit_files: git diff-tree --no-commit-id --name-only -r <commit> --- --multi --expand --preview 'bat --style=numbers --color=always {}'

# Edit local git exclude file
$EDITOR .git/info/exclude

# Git diff specific file
git diff <git_file>

# Git diff specific file with another branch
git diff <branch> -- <git_file>

# Git diff specific file and ignore whitespace
git diff -w <git_file>

# Git diff specific file with another branch and ignore whitespace
git diff -w <branch> -- <git_file>

# Git stash specific files
git stash push <git_dirty_files>

# Git stash specific files with message / name
git stash push -m "<message>" <git_dirty_files>

# Git stash staged changes
git stash push --staged

# Git stash staged changes with message / name
git stash push --staged -m "<message>"

# Git stash all files including untracked files
git stash --include-untracked

# View most recent git stash
git stash show -p

# List stashes
git stash list

# Apply a specific stash
git stash apply <stash>

# Pop a specific stash
git stash pop <stash>

# Git diff with difftastic
GIT_EXTERNAL_DIFF=difft git diff

# Git diff specific file with difftastic
GIT_EXTERNAL_DIFF=difft git diff <git_file>

# Git diff specific file with another branch with difftastic
GIT_EXTERNAL_DIFF=difft git diff <branch> -- <git_file>

# Git log with difftastic
GIT_EXTERNAL_DIFF=difft git log -p --ext-diff

# Git show commit with difftastic
GIT_EXTERNAL_DIFF=difft git show <commit> --ext-diff

# Commit with co-author
git commit -e -m "commit message" -m "<co_authors>"

# Restore staged files
git restore --staged <staged_files>

# Delete local branches not on remote
git branch -r | awk '{print $1}' | egrep -v -f /dev/fd/0 <(git branch -vv | grep <remote>) | awk '{print $1}' | xargs git branch -D

# Delete a branch
git branch -d <branch>

# Force-Delete a branch
git branch -D <branch>

# Rename current branch
git branch -m <current_branch> <new_branch>

$ new_branch: echo <current_branch> | vipe

# Checkout a branch with name based on current branch
git checkout -b <current_branch>

# Copy current branch name
echo <current_branch> | pbcopy

# Checkout last branch
git checkout -

# Pull and rebase on main branch
git pull --rebase <remote> <main_branch>

# Pull and rebase interactively on main branch
git pull --rebase=interactive <remote> <main_branch>

# Pull and rebase on given branch
git pull --rebase <remote> <branch>

# Pull and rebase interactively on given branch
git pull --rebase=interactive <remote> <branch>

# Fetch and merge remote main branch
git fetch <remote> <main_branch> && git merge <remote>/<main_branch>

# Push specific branch to remote
git push <remote> <branch>:<branch>

# Push to specific remote
git push <remote>

# Push to all remotes
git remote | xargs -n1 git push

# Set a new url for a remote
git remote set-url <remote> <newurl>

$ newurl: git remote get-url <remote> | vipe

# Revert without committing
git revert --no-commit <ref>

# Revert a given commit without committing
git revert --no-commit <commit>

# Revert a given commit
git revert <commit>

# Abort in-progress revert
git revert --abort

# Checkout contents of file
git checkout -- <git_changed_files>

# Checkout contents of file on another branch or tag
git checkout <branch_or_tag> -- <git_file>

# Checkout contents of directory on another branch or tag
git checkout <branch_or_tag> -- <git_dir>

# Checkout contents of file at a commit
git checkout <commit> -- <git_file>

# Checkout contents of directory at a commit
git checkout <commit> -- <git_dir>

# Show contents of a given commit
git show <commit>

# Show file
git show HEAD:<git_file>

# Show file without text conversion (i.e., no encryption or other filtering)
git show HEAD:<git_file> --no-textconv

# Show file on a given branch
git show <branch>:<git_file>

# Show file at a given commit
git show <commit>:<git_file>

# Optimize Git Repo
git gc --prune=now --aggressive

# Print hash of HEAD
git rev-parse HEAD | tr -d '\n'

# Copy hash of HEAD
git rev-parse HEAD | tr -d '\n' | pbcopy

# Print short hash of HEAD
git rev-parse HEAD | head -c 8

# Copy short hash of HEAD
git rev-parse HEAD | head -c 8 | pbcopy

# Print hash of given commit
git rev-parse <commit> | tr -d '\n'

# Copy hash of given commit
git rev-parse <commit> | tr -d '\n' | pbcopy

# Print short hash of given commit
git rev-parse <commit> | head -c 8

# Copy short hash of given commit
git rev-parse <commit> | head -c 8 | pbcopy

# Count commits up to HEAD
git rev-list --count @

# "Undo" last commit
git reset HEAD~1

# Soft reset to a given commit
git reset --soft <commit>

# Soft reset to a given branch
git reset --soft <branch>

# Hard reset to a given commit
git reset --hard <commit>

# Hard reset to a given branch
git reset --hard <branch>

# Create a commit to make current branch look like a given branch
git diff HEAD <branch> | git apply

# Create a commit to make current branch look like a given commit
git diff HEAD <commit> | git apply

# Make working tree look like a given commit
git restore --source <commit> .

# Make working tree look like a given branch
git restore --source <branch> .

# Apply patch on clipboard
git apply <(pbpaste)

# Reverse patch on clipboard
git apply --reverse <(pbpaste)

# Create an empty commit
git commit --allow-empty

# Commit with given date/time
GIT_AUTHOR_DATE="<datetime_full>" GIT_COMMITTER_DATE=$GIT_AUTHOR_DATE git commit

$ datetime_full: date -d "<datetime>" +"%Y-%m-%d %H:%M:%S"

# Clean/remove merge/rebase leftover/backup files
fd '_(BACKUP|BASE|LOCAL|REMOTE)_' . -x rm

# Bisect with HEAD as bad and <commit> as good
git bisect start HEAD <commit>

# Bisect with HEAD as bad and <branch> as good
git bisect start HEAD <branch>

# See what git bisect has tested so far
git bisect log

# Create new "Workspace" with a different git author
cat >> .envrc <<EOF
export GIT_AUTHOR_NAME="<git_author_name>"
export GIT_AUTHOR_EMAIL="<git_author_email>"
export GIT_COMMITTER_NAME=\$GIT_AUTHOR_NAME
export GIT_COMMITTER_EMAIL=\$GIT_AUTHOR_EMAIL
EOF

# Configure SSH Signing via 1Password for Current Repo
git config gpg.ssh.program /Applications/1Password.app/Contents/MacOS/op-ssh-sign

# Configure SSH Signing Key for Current Repo
git config user.signingKey '<ssh_public_key_text>' && git config gpg.format ssh && git config commit.gpgSign true && git config tag.gpgSign true

# Configure SSH Signing Key from 1Password for Current Repo
git config user.signingKey '<op_ssh_key_public_key_text>' && git config gpg.format ssh && git config commit.gpgSign true && git config tag.gpgSign true

# Add SSH key to allowed_signers
echo "$(echo $GIT_AUTHOR_EMAIL || git config --get user.email) namespaces=\"git\" <ssh_public_key_text>" >> ./allowed_signers

# Add SSH key from 1Password to allowed_signers
echo "$(echo $GIT_AUTHOR_EMAIL || git config --get user.email) namespaces=\"git\" <op_ssh_key_public_key_text>" >> ./allowed_signers

$ op_ssh_key_public_key_text: op item get <op_ssh_key> --format json | jq -r '.fields[] | select(.id == "public_key") | .value'
$ op_ssh_key: op item list --categories "SSH Key" | tail -n +2 --- --map "cut -d ' ' -f1"
$ ssh_public_key_text: cat <ssh_public_key_file>
$ ssh_public_key_file: fd . ~/.ssh -e pub

$ current_branch: git branch --show-current
$ co_authors: git log --pretty="%an <%ae>" | sort | uniq | sed 's|^|Co-authored-by: |g' --- --multi
$ staged_files: git diff --staged --name-only --- --multi --expand --preview 'bat --style=numbers --color=always {}'
$ branch: git branch | cut -c 3-
$ main_branch: git branch | cut -c 3- | grep -m 1 '^\(main\|master\|dev\|development\|trunk\)$'
$ branch_or_tag: (git branch | cut -c 3-; git tag)
$ commit: git log --oneline --max-count 250 --- --map 'cut -d " " -f 1'
$ git_changed_files: git diff --name-only --- --multi --expand
$ git_file: git ls-files
$ git_dir: git ls-files | xargs -n1 dirname | uniq
$ git_dirty_files: git diff --name-only --- --multi
$ glob: fd -td
$ ref: echo -e 'HEAD\n'
$ remote: git remote
$ stash: git stash list --- --map 'cut -d ":" -f 1'
$ user_name: git config user.name
$ commit_from_branch: git log --oneline --max-count 250 <branch> --- --map 'cut -d " " -f 1'
$ conflicted_file: git diff --name-only --diff-filter=U --relative
